pipeline {
    agent {
        docker {
            image 'demopq/robot-python-sele-chor:phuongttq'
            args '-u root'
        }
    }
    
    parameters {
        string(name: 'TASK_ID', defaultValue: '', description: 'Task ID from TestOps')
        choice(name: 'TASK_TYPE', choices: ['execution', 'plan', 'cicd'], description: 'Type of task')
    }
    
    environment {
        ROBOT_OPTIONS = "--outputdir results --timestampoutputs"
    }
    
    stages {
        stage('Setup') {
            steps {
                script {
                    echo "Starting ${params.TASK_TYPE} task: ${params.TASK_ID}"
                    echo "Task Type: ${params.TASK_TYPE}"
                    echo "Task ID: ${params.TASK_ID}"
                    sh 'mkdir -p results'
                }
            }
        }
        
        stage('Run Robot Tests') {
            steps {
                script {
                    try {
                        sh 'robot ${ROBOT_OPTIONS} Bases/Testcase/login.robot || true'
                        echo "Robot tests completed"
                    } catch (Exception e) {
                        echo "Robot tests failed, but continuing..."
                    }
                }
            }
        }
        
        stage('Generate Report') {
            steps {
                script {
                    try {
                        if (fileExists('results/output.xml')) {
                            echo "Found output.xml, generating detailed report"
                            sh 'robot --outputdir results --report results/report.html --log results/log.html results/output.xml || true'
                        } else {
                            echo "No output.xml found, creating minimal report"
                            sh '''
                                cat > results/output.xml << 'EOF'
<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 6.0.2" generated="2024-01-01 00:00:00.000000" rpa="false" schemaversion="3">
<suite id="s1" name="Test Suite" source="test.robot">
<test id="s1-t1" name="Test Case">
<kw name="Log" library="BuiltIn">
<msg timestamp="20240101 00:00:00.000" level="INFO">Test execution completed</msg>
<status status="FAIL" starttime="20240101 00:00:00.000" endtime="20240101 00:00:01.000"></status>
</kw>
<status status="FAIL" starttime="20240101 00:00:00.000" endtime="20240101 00:00:01.000" critical="true">Test failed</status>
</test>
<status status="FAIL" starttime="20240101 00:00:00.000" endtime="20240101 00:00:01.000" critical="true"></status>
</suite>
<statistics>
<total>
<stat pass="0" fail="1" skip="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat pass="0" fail="1" skip="0" id="s1" name="Test Suite">Test Suite</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
EOF
                            '''
                        }
                        
                        if (!fileExists('results/report.html')) {
                            sh 'robot --outputdir results --report results/report.html --log results/log.html results/output.xml || true'
                        }
                        
                        echo "Report generation completed"
                    } catch (Exception e) {
                        echo "Report generation failed: ${e.getMessage()}"
                    }
                }
            }
        }
        
        stage('Archive Results') {
            steps {
                script {
                    try {
                        sh 'tar czf results.tar.gz -C results .'
                        archiveArtifacts artifacts: 'results/**/*', fingerprint: true
                        archiveArtifacts artifacts: 'results.tar.gz', fingerprint: true
                        echo "Results archived successfully"
                    } catch (Exception e) {
                        echo "Archive failed: ${e.getMessage()}"
                    }
                }
            }
        }
    }
    
    post {
        always {
            script {
                def taskId = params.TASK_ID ?: ''
                def buildResult = currentBuild.result ?: 'UNKNOWN'
                def buildStatus = currentBuild.currentResult ?: 'UNKNOWN'
                
                echo "Build Summary:"
                echo "  - Job Name: ${env.JOB_NAME}"
                echo "  - Build Number: ${env.BUILD_NUMBER}"
                echo "  - Build Result: ${buildResult}"
                echo "  - Build Status: ${buildStatus}"
                echo "  - Task ID: ${taskId}"
                echo "  - Task Type: ${params.TASK_TYPE}"
                
                def webhookData = [
                    name: env.JOB_NAME,
                    build: [
                        number: env.BUILD_NUMBER,
                        result: buildResult,
                        status: buildStatus,
                        timestamp: currentBuild.startTimeInMillis,
                        duration: currentBuild.duration
                    ]
                ]
                
                if (taskId && taskId.trim()) {
                    webhookData.build.parameters = [TASK_ID: taskId]
                    echo "Task ID included in webhook: ${taskId}"
                }
                
                try {
                    httpRequest(
                        url: 'http://backend:8000/api/reports/jenkins/webhook',
                        httpMode: 'POST',
                        contentType: 'APPLICATION_JSON',
                        requestBody: groovy.json.JsonOutput.toJson(webhookData),
                        validResponseCodes: '200,201,202'
                    )
                    echo "Webhook sent successfully for result: ${buildResult}"
                } catch (Exception e) {
                    echo "Failed to send webhook: ${e.getMessage()}"
                }
            }
        }
        
        success {
            script {
                def successMessage = ''
                switch(params.TASK_TYPE) {
                    case 'execution':
                        successMessage = 'Execution completed successfully'
                        break
                    case 'plan':
                        successMessage = 'Scheduled plan completed successfully'
                        break
                    case 'cicd':
                        successMessage = 'CI/CD pipeline completed successfully'
                        break
                }
                echo successMessage
                echo "Report generated and sent to backend"
            }
        }
        
        failure {
            script {
                def failureMessage = ''
                switch(params.TASK_TYPE) {
                    case 'execution':
                        failureMessage = 'Execution failed'
                        break
                    case 'plan':
                        failureMessage = 'Scheduled plan failed'
                        break
                    case 'cicd':
                        failureMessage = 'CI/CD pipeline failed'
                        break
                }
                echo failureMessage
                echo "Report still generated and sent to backend"
            }
        }
        
        cleanup {
            script {
                echo "Cleaning up workspace..."
            }
        }
    }
}
